-- {-# LANGUAGE ScopedTypeVariables #-}
-- {-# LANGUAGE TemplateHaskell #-}
-- {-# LANGUAGE DeriveDataTypeable #-}
-- {-# LANGUAGE DataKinds #-}
-- {-# LANGUAGE FlexibleInstances #-}
{-# LANGUAGE TypeFamilies #-}
{-# LANGUAGE ParallelListComp #-}
-- {-# LANGUAGE RankNTypes #-}
-- {-# LANGUAGE BangPatterns #-}
-- {-# LANGUAGE FlexibleContexts #-}
-- # LANGUAGE StandaloneDeriving #
-- {-# LANGUAGE GeneralizedNewtypeDeriving #-}
-- {-# LANGUAGE TypeOperators #-}
-- {-# LANGUAGE MultiParamTypeClasses #-}
-- {-# LANGUAGE UndecidableInstances #-}
-- {-# LANGUAGE ConstraintKinds #-}
-- {-# LANGUAGE RebindableSyntax #-}
-- {-# LANGUAGE PartialTypeSignatures #-}

import System.IO

import SubHask
import SubHask.Algebra.Metric
-- import SubHask.Algebra.Vector
import SubHask.Compatibility.ByteString
-- import SubHask.Category.Trans.Derivative

-- import HLearn.History
-- import HLearn.Optimization.Univariate

-- import System.IO

import qualified Prelude as P
import Control.Monad.Random
import Control.Monad.State
import SubHask.Compatibility.ByteString
import SubHask.Algebra.Container
import SubHask.Algebra.Logic
import SubHask.Algebra
import SubHask.Category
-- import SubHask.Internal.Prelude
import Control.Monad
-- import Control.Monad.Trans.State
import qualified Data.List as L
import System.IO
import HLearn.Data.SpaceTree.CoverTree

--------------------------------------------------------------------------------


-- instance Metric DNA

data BP = A | T | C | G |
    N | Y | S | K | M | W | R | B |
    D | H | V | U deriving (Show)

-- instance Enum BP where
--     {-# INLINE succ #-}
--     succ = P.succ

--     # INLINE toEnum #
--     toEnum i = if i < 0
--         then P.toEnum 0
--         else P.toEnum i

type instance Logic BP = Bool

instance Eq_ BP where
    A==A = True
    T==T = True
    C==C = True
    G==G = True
    N==_ = True
    U==_ = False
    K==x = x==K || x==G || x==T
    S==x = x==S || x==G || x==C
    Y==x = x==Y || x==T || x==C
    M==x = x==M || x==A || x==C
    W==x = x==W || x==A || x==T
    R==x = x==R || x==A || x==G
    B==x = x==B || x==T || x==G || x==C
    D==x = x==D || x==T || x==G || x==A
    H==x = x==H || x==T || x==C || x==A
    V==x = x==V || x==G || x==C || x==A
    _==_ = False

data SeqData = SeqData [BP]
    deriving (Show)

-- getSequence :: [Int] -> Int -> ([BP], g)
-- getSequence randomGen i = map (\x -> getBP x) randomInts
--     where
--         getBP x = case x `mod` 4 of
--             0 -> A
--             1 -> T
--             2 -> C
--             3 -> G
--         randomInts = P.take i randomGen

rollDie :: State StdGen Int
rollDie = state $ randomR (1, 6)

-- foldDice = Control.Monad.liftM foldl

-- rollDice :: [Int]
-- rollDice = foldDice
-- rollDice = Control.Monad.liftM2 (,) rollDie rollDie

-- randomSequence :: Int -> Int -> [[BP]]
-- randomSequence gen i = [[x] | x <- [y] | y <- (rs i)]
--     where
--         getBP x = case x `mod` 4 of
--             0 -> A
--             1 -> T
--             2 -> C
--             3 -> G
--         rs :: [Int] -> [BP]
--         rs n =  map (\x -> getBP x) [1..n]
--         randomInts = P.take i (randoms gen)
--------------------------------------------------------------------------------

main = do
    -- putStrLn $ show (distance a b)
    -- gen <- newStdGen
    -- let randomSequence = randoms gen
    -- gen <- newStdGen
    -- let randomSequence = getSequence $ randoms gen
    -- putStrLn $ show $ randomSequence 10
    -- putStrLn $ show $ randomSequence 10
    -- putStrLn $ show $ randomSequence 10
    -- putStrLn $ show $ randomSequence 10
    -- putStrLn $ show $ A == A
    -- putStrLn $ show $ A == T
    g <- getStdGen
    let a = evalState rollDie g
    -- let a = Control.Monad.fmap (rollDie g) [1..3]
    putStrLn $ show $  a
    -- putStrLn $ show $ evalState rollDie (execState a)
    -- putStrLn $ P.take 3 (randomSequence 10)
    -- print . P.take 10 $ (randomRs ('a', 'c') g)
    -- print . P.take 10 $ (randomRs ('a', 'z') g)